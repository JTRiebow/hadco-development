//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hadco.Data {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Hadco.Data.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @PrepDownTimeReasonID int, @PretripDownTimeReasonID int, @PosttripDownTimeReasonID int
        ///
        ///select @PrepDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber = &apos;TKOH&apos; and PhaseNumber = &apos;GEN&apos; and CategoryNumber = &apos;PREP&apos;; 
        ///select @PretripDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber = &apos;TKOH&apos; and PhaseNumber = &apos;GEN&apos; and CategoryNumber = &apos;PRE&apos;;
        ///select @PosttripDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber =  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AddLoadTimerDowntimes {
            get {
                return ResourceManager.GetString("AddLoadTimerDowntimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @downTimeCategoryID int, @downTimeJobID int, @downTimePhaseID int;
        ///
        ///select @downTimeCategoryID = c.CategoryID, @downTimeJobID = c.JobID, @downTimePhaseID = c.PhaseID
        ///from Categories c
        ///where c.CategoryNumber =&apos;Down&apos; and c.JobNumber = &apos;HADCO&apos; and c.PhaseNumber = &apos;Shop&apos;; -- this is a special downtime job for mechanics downtime
        ///
        ///delete jt
        ///from JobTimers jt
        ///where jt.CategoryID = @downTimeCategoryID
        ///and jt.timesheetid = @timesheetid;
        ///
        ///with EmployeeTimersCte as
        ///(
        ///	select sum(DateDiff(minute, e [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AddMechanicDowntime {
            get {
                return ResourceManager.GetString("AddMechanicDowntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE VIEW TruckerDailies
        ///AS
        ///select	convert(int, ROW_NUMBER() over (order by [Date])) TruckerDailyID,
        ///		[Date], 
        ///         Name, 
        ///         LoadTimerID, 
        ///         TicketNumber,
        ///		 DowntimeTimerID,
        ///         DowntimeCode, 
        ///         Truck, 
        ///         Trailer, 
        ///         PupTrailer, 
        ///         Tons,
        ///         LoadSite,
        ///         DumpSite,
        ///         BillType, 
        ///         Note, 
        ///		 InvoiceNumber, 
        ///         Material, 
        ///         LoadEquipment,
        ///         Job,
        ///         JobID, 
        ///         Phase,
        ///         Pha [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CreateTruckerDailyView {
            get {
                return ResourceManager.GetString("CreateTruckerDailyView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET ANSI_NULLS ON
        ///GO
        ///SET QUOTED_IDENTIFIER ON
        ///GO
        ///
        ///create function [dbo].[GetCustomerType]
        ///(
        ///	@JobClass nvarchar(128), @JobNumber nvarchar(128)
        ///)
        ///returns int
        ///as
        ///BEGIN
        ///declare @CustomerTypeID int;
        ///	select @CustomerTypeID = ct.CustomerTypeID 
        ///from CustomerTypes ct
        ///where case when @JobClass like &apos;P%&apos;then &apos;Development&apos; 
        ///		when @JobClass like &apos;L%&apos; or @JobClass like &apos;F%&apos; or @JobClass like &apos;J%&apos; then &apos;Residential&apos;
        ///		when @JobClass like &apos;S%&apos; and @JobNumber = &apos;METRO&apos; then &apos;Metro&apos;
        ///		when @JobClass lik [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetCustomerTypeID {
            get {
                return ResourceManager.GetString("GetCustomerTypeID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with EmployeeMinutes as 
        ///(
        ///	select 
        ///		ts.TimesheetID
        ///		, isNull(et.TravelMinutes, 0) TravelMinutes
        ///		, isNull(et.GreaseMinutes, 0) GreaseMinutes
        ///		, isNull(et.DailyMinutes, 0) DailyMinutes
        ///		, isNull(et.ShopMinutes, 0) ShopMinutes
        ///		, Sum(DATEDIFF(minute, ete.ClockIn, ete.ClockOut)) EmployeeMinutes
        ///	from EmployeeTimers et
        ///		join EmployeeTimerEntries ete on ete.EmployeeTimerID = et.EmployeeTimerID
        ///		join Timesheets ts on ts.TimesheetID = et.TimesheetID
        ///		join Employees e on e.EmployeeID = ts.Empl [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetDiscrepancyTimersCsv {
            get {
                return ResourceManager.GetString("GetDiscrepancyTimersCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @PrepDownTimeReasonID int, @PretripDownTimeReasonID int, @PosttripDownTimeReasonID int;
        ///select @PrepDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber = &apos;TKOH&apos; and PhaseNumber = &apos;GEN&apos; and CategoryNumber = &apos;PREP&apos;; 
        ///select @PretripDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber = &apos;TKOH&apos; and PhaseNumber = &apos;GEN&apos; and CategoryNumber = &apos;PRE&apos;;
        ///select @PosttripDownTimeReasonID = dtr.DowntimeReasonID from downtimereasons dtr where jobnumber = &apos; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetDowntimeTimersCsv {
            get {
                return ResourceManager.GetString("GetDowntimeTimersCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select
        ///	e.[Name] Employee
        ///	, ete.ClockIn
        ///	, ete.ClockOut
        ///	, DATEDIFF(minute, ete.ClockIn, ete.ClockOut) / 60 [Hours]
        ///	, DateDiff(minute, ete.ClockIn, ete.ClockOut) % 60 [Minutes]
        ///from EmployeeTimerEntries ete
        ///	join EmployeeTimers et on et.EmployeeTimerID = ete.EmployeeTimerID
        ///	join  Employees e on e.EmployeeID = et.EmployeeID
        ///where 
        ///	et.Day between @startDate and @endDate
        ///	and et.DepartmentID in @departmentId
        ///	and e.[Status] = 1
        ///group by e.[Name], ete.ClockIn, ete.ClockOut, et.[Day]
        ///order by e [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeClockInsOutsCSV {
            get {
                return ResourceManager.GetString("GetEmployeeClockInsOutsCSV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @AllDepartments bit,
        ///	@OwnDepartments bit;
        ///set @AllDepartments = 0;
        ///set @OwnDepartments = 0;
        ///
        ///select 
        ///	@AllDepartments = case when @AllDepartments = 1 or raa.AllDepartments = 1 then 1 else 0 end,
        ///	@OwnDepartments = case when @OwnDepartments = 1 or raa.OwnDepartments = 1 then 1 else 0 end
        ///from RoleAuthActivities raa
        ///	join EmployeeRoles er on er.RoleId = raa.RoleID
        ///	join AuthActivities aa on aa.AuthActivityID = raa.AuthActivityID
        ///where er.EmployeeID = @currentUserId
        ///	and aa.[Key] in (&apos;View [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeListings {
            get {
                return ResourceManager.GetString("GetEmployeeListings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with SpecificDepartmentsList as
        ///(
        ///	select distinct
        ///		e.EmployeeID,
        ///		Substring(
        ///			(
        ///				select distinct
        ///					&apos;• &apos; + aa.Name + &apos;, &apos;
        ///				from Employees ei
        ///					join EmployeeRoles er on er.EmployeeID = ei.EmployeeID
        ///					join RoleAuthActivities raa on raa.RoleID = er.RoleId
        ///					join RoleAuthActivityDepartments raad on raad.RoleAuthActivityID = raa.RoleAuthActivityID
        ///					join AuthActivities aa on aa.AuthActivityID = raa.AuthActivityID
        ///				where e.EmployeeID = ei.EmployeeID 
        ///				for xml path(&apos;&apos;) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeRolesCsv {
            get {
                return ResourceManager.GetString("GetEmployeeRolesCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select  isnull(e.EmployeeNumber, e.Name) Employee, 
        ///CONVERT(nvarchar(10),et.[Day], 101) [Day],
        ///ltrim(str(sum(dbo.GetTimespanHours(ete.ClockIn, ete.ClockOut)), 5,2)) TotalHours,
        ///d.Name Department,
        ///p.Name Pit
        ///from EmployeeTimecards etc 
        ///join Employees e on etc.EmployeeID = e.EmployeeID
        ///left join EmployeeTimers et on etc.EmployeeTimecardID = et.EmployeeTimecardID
        ///left join EmployeeTimerEntries ete on ete.EmployeeTimerID = et.EmployeeTimerID
        ///left join Pits p on ete.PitID = p.PitID
        ///join Departments d o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeTimecardCsv {
            get {
                return ResourceManager.GetString("GetEmployeeTimecardCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE @StartOfWeek DATE, 
        ///        @EndOfWeek   DATE;
        ///declare @AllDepartments bit,
        ///	@OwnDepartments bit;
        ///
        ///SELECT @StartOfWeek = Dateadd(dd, -( Datepart(dw, @Week) - 1 ), @Week);
        ///SELECT @EndOfWeek = Dateadd(dd, 7 - ( Datepart(dw, @Week) ), @Week); 
        ///set @AllDepartments = 0;
        ///set @OwnDepartments = 0;
        ///
        ///
        ///select 
        ///	@AllDepartments = case when @AllDepartments = 1 or raa.AllDepartments = 1 then 1 else 0 end,
        ///	@OwnDepartments = case when @OwnDepartments = 1 or raa.OwnDepartments = 1 then 1 else 0 end
        ///fr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeTimecards {
            get {
                return ResourceManager.GetString("GetEmployeeTimecards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE @startOfWeek date, @endOfWeek date;
        ///select @startOfWeek = DATEADD(dd, -(DATEPART(dw, @week)-1), @week) 
        ///select @endOfWeek = DATEADD(dd, 7-(DATEPART(dw, @week)), @week); 
        ///
        ///with timerSummary as
        ///(
        ///    select  @employeeID EmployeeID, et.[Day], ltrim(str(sum(dbo.GetTimeSpanHours(ete.ClockIn, ete.ClockOut)), 5,2)) TotalHours,
        ///		 ltrim(str(sum(dbo.GetTimeSpanHours(ete.ClockIn, ete.ClockOut)*60), 5,0)) TotalMinutes
        ///    from EmployeeTimers et 
        ///    left join EmployeeTimerEntries ete on ete.EmployeeTi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEmployeeTimecardSummary {
            get {
                return ResourceManager.GetString("GetEmployeeTimecardSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --Mechanics- Equipment Timers (All Employees in Mechanics)
        ///--EmployeeNumber(P. SAMA), Day, TotalHours, EquipmentNumber, EquipmentServiceType
        /// select e.EmployeeNumber, CONVERT(nvarchar(10),ts.Day, 101) Day, ltrim(str(sum(dbo.GetTimeSpanHours(ete.StartTime, ete.StopTime)), 5,2)) TotalHours, eq.EquipmentNumber, est.Code EquipmentServiceType
        /// from equipment eq
        /// join EquipmentTimers et on eq.EquipmentID = et.EquipmentID
        /// join EquipmentTimerEntries ete on et.EquipmentTimerID = ete.EquipmentTimerID
        /// join Equ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetEquipmentTimerCsv {
            get {
                return ResourceManager.GetString("GetEquipmentTimerCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with JobNumberForDevelopmentOverheadRows as
        ///(
        ///	select
        ///		et.EmployeeTimerID
        ///		, c.JobNumber
        ///		, ROW_NUMBER() OVER(PARTITION BY et.EmployeeTimerID order by ts.[Day], isNull(e.EmployeeNumber, e.[Name]), JobNumber, PhaseNumber, CategoryNumber DESC) AS rk
        ///	from EmployeeTimers et
        ///		join Timesheets ts on et.TimesheetID = ts.TimesheetID
        ///		join EmployeeJobTimers ejt on ejt.EmployeeTimerID = et.EmployeeTimerID
        ///		join JobTimers jt on jt.JobTimerID = ejt.JobTimerID
        ///		left join Categories c on c.CategoryID = j [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetJobTimerCsv {
            get {
                return ResourceManager.GetString("GetJobTimerCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with loads as
        ///(
        ///	select	e.EmployeeNumber, 
        ///			case when j.jobnumber in (&apos;METRO&apos;,&apos;ALTAVW&apos;) then 
        ///				case when p.phasenumber =&apos;GVPG&apos; then &apos;METROPG&apos;
        ///					 when p.phasenumber = &apos;GVWV&apos; then &apos;METROWV&apos;
        ///					 when p.phasenumber = &apos;GVTC&apos; then &apos;METROTC&apos; 
        ///					 when p.phasenumber =&apos;GVWJ&apos; then &apos;GVWJ&apos;
        ///					 when p.phasenumber = &apos;HKPG&apos; then &apos;HKPG&apos;
        ///					 when p.phasenumber = &apos;PPTC&apos; then &apos;PPTC&apos; 
        ///					 when p.phasenumber = &apos;PPPG&apos; then &apos;PPPG&apos; 
        ///					 when p.phasenumber = &apos;GVKN&apos; then &apos;GVKN&apos; 
        ///					 when p.phasenumb [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetLoadTimersCsv {
            get {
                return ResourceManager.GetString("GetLoadTimersCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select 
        ///	e.[Name]
        ///	, n.[Description]
        ///	, nt.[Name] NoteType
        ///	, nt.[Description] NoteTypeDescription
        ///	, Resolved
        ///from Notes n
        ///	left join Employees e on e.EmployeeID = n.EmployeeID
        ///	left join NoteTypes nt on nt.NoteTypeID = n.NoteTypeID
        ///where
        ///	(@startDate &lt;= n.[Day]
        ///		or @startDate is null)
        ///	and (n.[Day] &lt;= @endDate
        ///		or @endDate is null)
        ///	and (n.DepartmentID in @departmentID).
        /// </summary>
        public static string GetNotesCsv {
            get {
                return ResourceManager.GetString("GetNotesCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --STRING_AGG requires SQL server 2017 or higher (or Azure Sql). 
        ///--This may not work on everyone&apos;s local environment
        ///select distinct
        ///  CONVERT(nvarchar(10), et.Day, 101) Date
        ///  , e.Name
        ///  , o.Name Occurrence
        ///  , d.Name Department
        ///  , (select STRING_AGG(Description, &apos; , &apos;)
        ///      from Notes n
        ///      where NoteTypeID = 10 -- Occurrence type
        ///            and n.EmployeeID = et.EmployeeID
        ///            and n.DAY = et.Day
        ///            and n.DepartmentID = et.DepartmentID) Notes
        ///from Occurrences o
        ///  join E [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetOccurrencesCsv {
            get {
                return ResourceManager.GetString("GetOccurrencesCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select distinct 
        ///	et.[Day]
        ///	, c.JobNumber
        ///	, c.PhaseNumber
        ///	, c.CategoryNumber
        ///	, c.UnitsOfMeasure
        ///	, c.PlannedQuantity Est
        ///	, dbo.GetPreviousQuantity(jt.JobTimerID) PreviousQuantity
        ///	, jt.NewQuantity
        ///	, dbo.GetOtherNewQuantity(jt.JobTimerID) OtherNewQuantity
        ///from EmployeeTimers et
        ///cross apply 
        ///    (select jt.JobTimerID, jt.CategoryID, jt.Diary, jt.NewQuantity, jt.InvoiceNumber
        ///        from JobTimers jt 
        ///        where jt.TimesheetID = @timesheetID
        ///    ) jt
        ///left join EmployeeJobTimers ejt on  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetQuantitiesCsv {
            get {
                return ResourceManager.GetString("GetQuantitiesCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT 
        ///	lt.LoadTimerID,
        ///	b.Name as BillType, 
        ///	CONVERT(nvarchar(10),t.Day, 126) as [Date], 
        ///	e.Name,
        ///	tk.EquipmentNumber as Truck, 
        ///	tr.EquipmentNumber as Trailer, 
        ///	p.EquipmentNumber as PupTrailer,
        ///	lt.TicketNumber,  
        ///	lt.Tons,
        ///	lt.StartLocation as LoadSite, 
        ///	lt.EndLocation as DumpSite, 
        ///	m.Name as Material, 
        ///	le.EquipmentNumber as LoadEquipment,
        ///	j.JobNumber as Job,
        ///	j.JobID, 
        ///	ph.PhaseNumber as Phase,
        ///	ph.PhaseID, 
        ///	c.CategoryNumber as Category,
        ///	c.CategoryID, 
        ///	CAST(CAST(SUM(ISNULL [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetSingleTruckerDaily {
            get {
                return ResourceManager.GetString("GetSingleTruckerDaily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE @startOfWeek date, @endOfWeek date;
        ///
        ///select @startOfWeek = DATEADD(dd, -(DATEPART(dw, @week)-1), @week) 
        ///select @endOfWeek = DATEADD(dd, 7-(DATEPART(dw, @week)), @week);
        ///
        ///select e.EmployeeID, e.Name, min(ed.DepartmentID) DepartmentID--default department to concrete, otherwise residential then development
        ///from Employees e
        ///join EmployeeSupervisors es on es.EmployeeID = e.EmployeeID
        ///join EmployeeRoles er on er.EmployeeID = e.EmployeeID
        ///left join EmployeeDepartments ed on e.EmployeeID = ed.Empl [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetSuperintendentForemanTimesheets {
            get {
                return ResourceManager.GetString("GetSuperintendentForemanTimesheets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declare @startOfWeek date, @endOfWeek date;
        ///select @startOfWeek = DATEADD(dd, -(DATEPART(dw, @week)-1), @week) 
        ///select @endOfWeek = DATEADD(dd, 7-(DATEPART(dw, @week)), @week);
        ///
        ///select e.EmployeeID, e.Name, min(ed.DepartmentID) DepartmentID--default department to concrete, otherwise residential then development
        ///from Employees e
        ///join EmployeeSupervisors es on es.EmployeeID = e.EmployeeID
        ///join EmployeeRoles er on er.EmployeeID = e.EmployeeID
        ///join EmployeeDepartments ed on e.EmployeeID = ed.EmployeeID        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetSuperintendentForemanTimesheetsWithEmployee {
            get {
                return ResourceManager.GetString("GetSuperintendentForemanTimesheetsWithEmployee", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select top 1 tc.TruckClassificationID
        ///from TruckClassifications tc
        ///join Equipment truck on @TruckID = truck.EquipmentID
        ///left join Equipment trailer on @TrailerID = trailer.EquipmentID
        ///left join Equipment pup on @PupID = pup.EquipmentID
        ///where (truck.EquipmentNumber like tc.Truck + &apos;%&apos; or truck.EquipmentNumber like &apos;S%&apos;)
        ///and (trailer.EquipmentNumber like tc.Trailer1 + &apos;%&apos; or tc.Trailer1 is null)
        ///and (pup.EquipmentNumber like tc.Trailer2 + &apos;%&apos; or tc.Trailer2 is null)
        ///order by tc.Trailer2 desc, tc.Trail [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetTruckClassificationID {
            get {
                return ResourceManager.GetString("GetTruckClassificationID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select t.Day [Date],
        /// 		e.Name, 
        /// 		lt.LoadTimerID, 
        /// 		null, 
        ///		d.DowntimeTimerID,
        /// 		dr.Code DowntimeCode,
        ///         tr.EquipmentNumber, 
        /// 		trl.EquipmentNumber, 
        /// 		pp.EquipmentNumber, 
        /// 		null, null, null, null, null, null, null, null, 
        /// 		case when dr.UseLoadJob = 1 then j.JobNumber else dr.JobNumber end JobNumber, null,
        /// 		case when dr.UseLoadPhase = 1 then ph.PhaseNumber else dr.PhaseNumber end PhaseNumber, null, 
        /// 		case when dr.UseLoadCategory = 1 then c.CategoryNumber else dr.CategoryNu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetTruckerDailiesDowntimeTimers {
            get {
                return ResourceManager.GetString("GetTruckerDailiesDowntimeTimers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  select t.Day [Date], 
        ///         e.Name, 
        ///         lt.LoadTimerID, 
        ///         lt.TicketNumber,
        ///		 null DowntimeTimerID,
        ///         null DowntimeCode, 
        ///         tr.EquipmentNumber as Truck, 
        ///         tlr.EquipmentNumber as Trailer, 
        ///         pp.EquipmentNumber as PupTrailer, 
        ///         cast(lt.Tons as varchar) Tons,
        ///         lt.StartLocation LoadSite,
        ///         lt.EndLocation DumpSite,
        ///         b.Name as BillType, 
        ///         lt.Note, lt.InvoiceNumber, 
        ///         m.Name as Material, 
        ///         le.Equipm [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetTruckerDailiesLoadTimers {
            get {
                return ResourceManager.GetString("GetTruckerDailiesLoadTimers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with EmployeeTimersCte as
        ///(
        ///	select sum(dbo.GetTimespanHours(ete.ClockIn, ete.ClockOut)) TotalHours, t.TimesheetID
        ///	from Timesheets t
        ///	join EmployeeTimers et on t.TimesheetID = et.TimesheetID
        ///	join EmployeeTimerEntries ete on et.EmployeeTimerID = ete.EmployeeTimerID
        ///	where ete.ClockOut is not null
        ///	and ete.ClockIn &gt; &apos;2000-01-01&apos; -- some dates are in the system that are way old and cause an overflow on the datediff.
        ///	and t.[day] between @startDate and @endDate
        ///	group by t.TimesheetID
        ///),
        ///LoadAndDow [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetTruckingTimerDiscrepanciesCsv {
            get {
                return ResourceManager.GetString("GetTruckingTimerDiscrepanciesCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with EmployeeTimersCte as
        ///(
        ///	select isnull(e.EmployeeNumber, e.Name) EmployeeNumber, CONVERT(nvarchar(10),et.Day, 101) [Day], t.TimesheetID, 
        ///		sum(isnull(dbo.GetTimeSpanHours(ete.ClockIn, ete.ClockOut), 0)) TotalHours, e.Name
        ///	from EmployeeTimers et
        ///	join EmployeeTimerEntries ete on et.EmployeeTimerID = ete.EmployeeTimerID
        ///	join Employees e on et.EmployeeID = e.EmployeeID
        ///	join Timesheets t on et.TimesheetID = t.TimesheetID
        ///	where et.[Day] between @startDate and @endDate
        ///	and et.departmentid = 1
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetUnallocatedTimeConcreteCsv {
            get {
                return ResourceManager.GetString("GetUnallocatedTimeConcreteCsv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select
        ///  etc.employeetimecardid
        ///  , etc.employeeid
        ///  , e.NAME
        ///  , d.NAME Department
        ///  , d.DepartmentID
        ///  , etc.StartOfWeek
        ///  , LEFT(t.supervisor, Len(t.supervisor) - 1) Supervisor
        ///from employeetimecards etc
        ///  join employees e
        ///    on etc.employeeid = e.employeeid
        ///  join departments d
        ///    on etc.subdepartmentid = d.departmentid
        ///  cross apply (
        ///                select s.NAME + &apos;, &apos;
        ///                from employeesupervisors es
        ///                  join employees s
        ///                    on es.superviso [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GetWeeklyTimer {
            get {
                return ResourceManager.GetString("GetWeeklyTimer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with T as
        ///(
        ///select lt.LoadTimerID, lt.PricePerUnit, pr.[Value]
        ///from LoadTimers lt
        ///cross apply (select top 1 StartTime 
        ///			from LoadTimerEntries lte 
        ///			where lt.LoadTimerID = lte.LoadTimerID 
        ///			order by StartTime) lte
        ///join Jobs j on lt.JobID = j.JobID
        ///cross apply(select top 1 * from Pricings p 
        ///			where lt.BillTypeID = p.BillTypeID and j.CustomerTypeID = p.CustomerTypeID 
        ///			and (lt.JobID = p.JobID or j.CustomerID = p.CustomerID or lt.PhaseID = p.PhaseID)
        ///			and p.StartDate &lt;= lte.StartTime and [rest of string was truncated]&quot;;.
        /// </summary>
        public static string UpdatePricePerUnit {
            get {
                return ResourceManager.GetString("UpdatePricePerUnit", resourceCulture);
            }
        }
    }
}
